// 仕様：ROW側がカソード、COLOMN側がアノードの8x8マトリックスLED
const int RPIN[8]   = { 6, 7, 8, 9, 10, 11, 12, 13 };
const int CATHODEPIN[8] = {  2,  3,  4,  5,  14,  15,  16,  17 };

const int sx = 8;
const int sy = 8;
const int sz = 3; //R, G, B
const float density = 0.8; 
int world[8][8][3][2]; //sx, sy, sz, 2
const int b_size = 1;
int counter = 0;

void setup()
{
  // アノードを、LOWで初期化
  for( int i = 0; i < 8; i++ )
  {
    pinMode( RPIN[i], OUTPUT );
    digitalWrite( RPIN[i], LOW );
  }

  for( int i = 0; i < 8; i++ )
  {
    pinMode( CATHODEPIN[i], OUTPUT );
    digitalWrite( CATHODEPIN[i], HIGH );
  }

  //Make Stage
  randomSeed(analogRead(5));
  for (int i = 0; i < sx * sy * sz * density; i++) { 
    world[(int)random(sx)][(int)random(sy)][(int)random(sz)][1] = 1; 
  }
  
  Serial.begin(9600);
}

void loop()
{
    //DRAW STAGE
    for (int y = 0; y < sy; y++) {
      digitalWrite(CATHODEPIN[y], LOW);

      for (int z = 0; z < sz; z++) {
        if (z == 1) {Serial.print('G');}
        else if (z == 2) {Serial.print('B');}
        else {Serial.print('R');}
      for (int x = 0; x < sx; x++) {       
          if ((world[x][y][z][1] == 1) || (world[x][y][z][1] == 0 && world[x][y][z][0] == 1)) {
            world[x][y][z][0] = 1;

            if (z == 0) { digitalWrite(RPIN[x], HIGH); }
            Serial.print(1);
            
          } else {
            if (z == 0) { digitalWrite(RPIN[x], LOW); }
            Serial.print(0);            
              }
              
          if (world[x][y][z][1] == -1) {world[x][y][z][0] = 0;}
          world[x][y][z][1] = 0;
          
        }
        
        if(z != 0) {
          while (!endCheck());
        } else {
          delayMicroseconds(1);
          for (int x = 0; x < 8; x++) {digitalWrite(RPIN[x], LOW);}
          }

      }
            
      //RESET
      digitalWrite(CATHODEPIN[y], HIGH);
      }

  //Change STAGE
  counter++;
  if((counter%10) == 0) {
   for (int z = 0; z < sz; z++) {
   for (int x = 0; x < sx; x++) { 
    for (int y = 0; y < sy; y++) { 
      int count = neighbors(x, y, z); 
      //Serial.println(count);
      if (count == 9 && world[x][y][z][0] == 0) 
      { 
        world[x][y][z][1] = 1; 
      } 
      if ((count < 6 || count > 9) && world[x][y][z][0] == 1) 
     { 
        world[x][y][z][1] = -1; 
      } 
    } 
   }    
  }
  }
}

//足りない
int neighbors(int x, int y, int z) 
{ 
  return world[(x + 1) % sx][y][z][0] + 
         world[x][(y + b_size) % sy][z][0] + 
         world[(x + sx - b_size) % sx][y][z][0] + 
         world[x][(y + sx - b_size) % sx][z][0] + 
         world[(x + b_size) % sx][(y + b_size) % sy][z][0] + 
         world[(x + sx - b_size) % sx][(y + b_size) % sy][z][0] + 
         world[(x + sx - b_size) % sx][(y + sy - b_size) % sy][z][0] + 
         world[(x + b_size) % sx][(y + sy - b_size) % sy][z][0] + 

         world[x][y][(z + b_size) % sz][0] + 
         world[(x + 1) % sx][y][(z + b_size) % sz][0] + 
         world[x][(y + b_size) % sy][(z + b_size) % sz][0] + 
         world[(x + sx - b_size) % sx][y][(z + b_size) % sz][0] + 
         world[x][(y + sx - b_size) % sx][(z + b_size) % sz][0] + 
         world[(x + b_size) % sx][(y + b_size) % sy][(z + b_size) % sz][0] + 
         world[(x + sx - b_size) % sx][(y + b_size) % sy][(z + b_size) % sz][0] + 
         world[(x + sx - b_size) % sx][(y + sy - b_size) % sy][(z + b_size) % sz][0] + 
         world[(x + b_size) % sx][(y + sy - b_size) % sy][(z + b_size) % sz][0] + 
         
         world[x][y][(z + sz - b_size) % sz][0] + 
         world[(x + 1) % sx][y][(z + sz - b_size) % sz][0] + 
         world[x][(y + b_size) % sy][(z + sz - b_size) % sz][0] + 
         world[(x + sx - b_size) % sx][y][(z + sz - b_size) % sz][0] + 
         world[x][(y + sx - b_size) % sx][(z + sz - b_size) % sz][0] + 
         world[(x + b_size) % sx][(y + b_size) % sy][(z + sz - b_size) % sz][0] + 
         world[(x + sx - b_size) % sx][(y + b_size) % sy][(z + sz - b_size) % sz][0] + 
         world[(x + sx - b_size) % sx][(y + sy - b_size) % sy][(z + sz - b_size) % sz][0] + 
         world[(x + b_size) % sx][(y + sy - b_size) % sy][(z + sz - b_size) % sz][0]; 
}

boolean endCheck() {
  if(Serial.available()){
      char var = Serial.read();
      if (var == 'E') {return true;}
    }

    return false;
}
